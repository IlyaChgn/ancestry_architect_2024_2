//protoc --go_out=. --go-grpc_out=. --go-grpc_opt=paths=source_relative --go_opt=paths=source_relative *.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: admin.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Admin_GetAdminBySessionID_FullMethodName = "/Admin/GetAdminBySessionID"
	Admin_Login_FullMethodName               = "/Admin/Login"
	Admin_Logout_FullMethodName              = "/Admin/Logout"
	Admin_EditPassword_FullMethodName        = "/Admin/EditPassword"
	Admin_GetUsersList_FullMethodName        = "/Admin/GetUsersList"
	Admin_GetNodesList_FullMethodName        = "/Admin/GetNodesList"
	Admin_EditTreeName_FullMethodName        = "/Admin/EditTreeName"
	Admin_GetTreesList_FullMethodName        = "/Admin/GetTreesList"
)

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminClient interface {
	GetAdminBySessionID(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*UserData, error)
	Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*UserAuthResponse, error)
	Logout(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*UserAuthResponse, error)
	EditPassword(ctx context.Context, in *EditPasswordRequest, opts ...grpc.CallOption) (*UserData, error)
	GetUsersList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserDataList, error)
	GetNodesList(ctx context.Context, in *GetNodesListRequest, opts ...grpc.CallOption) (*NodeDataList, error)
	EditTreeName(ctx context.Context, in *EditTreeNameRequest, opts ...grpc.CallOption) (*TreeData, error)
	GetTreesList(ctx context.Context, in *GetTreesListRequest, opts ...grpc.CallOption) (*TreeDataList, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GetAdminBySessionID(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*UserData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserData)
	err := c.cc.Invoke(ctx, Admin_GetAdminBySessionID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Login(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*UserAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAuthResponse)
	err := c.cc.Invoke(ctx, Admin_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Logout(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*UserAuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAuthResponse)
	err := c.cc.Invoke(ctx, Admin_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) EditPassword(ctx context.Context, in *EditPasswordRequest, opts ...grpc.CallOption) (*UserData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserData)
	err := c.cc.Invoke(ctx, Admin_EditPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUsersList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserDataList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDataList)
	err := c.cc.Invoke(ctx, Admin_GetUsersList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetNodesList(ctx context.Context, in *GetNodesListRequest, opts ...grpc.CallOption) (*NodeDataList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeDataList)
	err := c.cc.Invoke(ctx, Admin_GetNodesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) EditTreeName(ctx context.Context, in *EditTreeNameRequest, opts ...grpc.CallOption) (*TreeData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TreeData)
	err := c.cc.Invoke(ctx, Admin_EditTreeName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetTreesList(ctx context.Context, in *GetTreesListRequest, opts ...grpc.CallOption) (*TreeDataList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TreeDataList)
	err := c.cc.Invoke(ctx, Admin_GetTreesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
// All implementations must embed UnimplementedAdminServer
// for forward compatibility.
type AdminServer interface {
	GetAdminBySessionID(context.Context, *SessionRequest) (*UserData, error)
	Login(context.Context, *LoginUserRequest) (*UserAuthResponse, error)
	Logout(context.Context, *SessionRequest) (*UserAuthResponse, error)
	EditPassword(context.Context, *EditPasswordRequest) (*UserData, error)
	GetUsersList(context.Context, *emptypb.Empty) (*UserDataList, error)
	GetNodesList(context.Context, *GetNodesListRequest) (*NodeDataList, error)
	EditTreeName(context.Context, *EditTreeNameRequest) (*TreeData, error)
	GetTreesList(context.Context, *GetTreesListRequest) (*TreeDataList, error)
	mustEmbedUnimplementedAdminServer()
}

// UnimplementedAdminServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServer struct{}

func (UnimplementedAdminServer) GetAdminBySessionID(context.Context, *SessionRequest) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminBySessionID not implemented")
}
func (UnimplementedAdminServer) Login(context.Context, *LoginUserRequest) (*UserAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAdminServer) Logout(context.Context, *SessionRequest) (*UserAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedAdminServer) EditPassword(context.Context, *EditPasswordRequest) (*UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPassword not implemented")
}
func (UnimplementedAdminServer) GetUsersList(context.Context, *emptypb.Empty) (*UserDataList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersList not implemented")
}
func (UnimplementedAdminServer) GetNodesList(context.Context, *GetNodesListRequest) (*NodeDataList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodesList not implemented")
}
func (UnimplementedAdminServer) EditTreeName(context.Context, *EditTreeNameRequest) (*TreeData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTreeName not implemented")
}
func (UnimplementedAdminServer) GetTreesList(context.Context, *GetTreesListRequest) (*TreeDataList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreesList not implemented")
}
func (UnimplementedAdminServer) mustEmbedUnimplementedAdminServer() {}
func (UnimplementedAdminServer) testEmbeddedByValue()               {}

// UnsafeAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServer will
// result in compilation errors.
type UnsafeAdminServer interface {
	mustEmbedUnimplementedAdminServer()
}

func RegisterAdminServer(s grpc.ServiceRegistrar, srv AdminServer) {
	// If the following call pancis, it indicates UnimplementedAdminServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Admin_ServiceDesc, srv)
}

func _Admin_GetAdminBySessionID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetAdminBySessionID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetAdminBySessionID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetAdminBySessionID(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Login(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Logout(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_EditPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).EditPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_EditPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).EditPassword(ctx, req.(*EditPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUsersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUsersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetUsersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUsersList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetNodesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetNodesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetNodesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetNodesList(ctx, req.(*GetNodesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_EditTreeName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTreeNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).EditTreeName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_EditTreeName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).EditTreeName(ctx, req.(*EditTreeNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetTreesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetTreesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Admin_GetTreesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetTreesList(ctx, req.(*GetTreesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Admin_ServiceDesc is the grpc.ServiceDesc for Admin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Admin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdminBySessionID",
			Handler:    _Admin_GetAdminBySessionID_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Admin_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Admin_Logout_Handler,
		},
		{
			MethodName: "EditPassword",
			Handler:    _Admin_EditPassword_Handler,
		},
		{
			MethodName: "GetUsersList",
			Handler:    _Admin_GetUsersList_Handler,
		},
		{
			MethodName: "GetNodesList",
			Handler:    _Admin_GetNodesList_Handler,
		},
		{
			MethodName: "EditTreeName",
			Handler:    _Admin_EditTreeName_Handler,
		},
		{
			MethodName: "GetTreesList",
			Handler:    _Admin_GetTreesList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
