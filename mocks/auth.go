// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/auth/usecases/auth.go

// Package mock_usecases is a generated GoMock package.
package mock_usecases

import (
	context "context"
	reflect "reflect"

	models "github.com/IlyaChgn/ancestry_architect_2024_2/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthStorageInterface is a mock of AuthStorageInterface interface.
type MockAuthStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStorageInterfaceMockRecorder
}

// MockAuthStorageInterfaceMockRecorder is the mock recorder for MockAuthStorageInterface.
type MockAuthStorageInterfaceMockRecorder struct {
	mock *MockAuthStorageInterface
}

// NewMockAuthStorageInterface creates a new mock instance.
func NewMockAuthStorageInterface(ctrl *gomock.Controller) *MockAuthStorageInterface {
	mock := &MockAuthStorageInterface{ctrl: ctrl}
	mock.recorder = &MockAuthStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStorageInterface) EXPECT() *MockAuthStorageInterfaceMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockAuthStorageInterface) CreateSession(ctx context.Context, sessionID string, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, sessionID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockAuthStorageInterfaceMockRecorder) CreateSession(ctx, sessionID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockAuthStorageInterface)(nil).CreateSession), ctx, sessionID, userID)
}

// CreateUser mocks base method.
func (m *MockAuthStorageInterface) CreateUser(ctx context.Context, email, password, passwordRepeat string) (*models.User, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email, password, passwordRepeat)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthStorageInterfaceMockRecorder) CreateUser(ctx, email, password, passwordRepeat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthStorageInterface)(nil).CreateUser), ctx, email, password, passwordRepeat)
}

// GetUserByEmail mocks base method.
func (m *MockAuthStorageInterface) GetUserByEmail(ctx context.Context, email string) (*models.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthStorageInterfaceMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthStorageInterface)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAuthStorageInterface) GetUserByID(ctx context.Context, id uint) (*models.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthStorageInterfaceMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthStorageInterface)(nil).GetUserByID), ctx, id)
}

// GetUserBySessionID mocks base method.
func (m *MockAuthStorageInterface) GetUserBySessionID(ctx context.Context, sessionID string) (*models.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBySessionID", ctx, sessionID)
	ret0, _ := ret[0].(*models.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBySessionID indicates an expected call of GetUserBySessionID.
func (mr *MockAuthStorageInterfaceMockRecorder) GetUserBySessionID(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBySessionID", reflect.TypeOf((*MockAuthStorageInterface)(nil).GetUserBySessionID), ctx, sessionID)
}

// RemoveSession mocks base method.
func (m *MockAuthStorageInterface) RemoveSession(ctx context.Context, sessionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", ctx, sessionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSession indicates an expected call of RemoveSession.
func (mr *MockAuthStorageInterfaceMockRecorder) RemoveSession(ctx, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockAuthStorageInterface)(nil).RemoveSession), ctx, sessionID)
}

// UpdateEmail mocks base method.
func (m *MockAuthStorageInterface) UpdateEmail(ctx context.Context, email string, userID uint) (*models.User, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", ctx, email, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockAuthStorageInterfaceMockRecorder) UpdateEmail(ctx, email, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockAuthStorageInterface)(nil).UpdateEmail), ctx, email, userID)
}
